const fs = require('fs')
const { util } = require('chai');
const path = require('path')

const reqlib = require('app-root-path').require
const { encryptionManager } = reqlib('/src/encryption-manager.js')

module.exports = config => {

  const storagePath = config.path

  return {
    /** 
     * copy data into a file on local
     * @param file          byte array to be saved in a file
     * @param options.path      relative path for the file to storagePath 
     * @param options.filename    name of a file to be saved
     * @param options.doEncrypt   whether to encrypt a file or not (bool)
     * @param options.encryptionInfo.secretKey the key that is used to encrypt a file (secret key of AES)
     * @param options.encryptionInfo.publicKey the data owner public key
     */
    upload: async (file, options) => {
      const filename = options.filename
      
      if (options.doEncrypt) {
        const { secretKey, publicKey } = options.encryptionInfo
        const encryptedFile = await encryptionManager.encrypter.encrypt(file, secretKey)
        encryptedFileObject = JSON.parse(encryptedFile)
        encryptedFileObject.encryptedSecretKey = await encryptionManager.encrypter.encryptSecretKey(secretKey, publicKey)

        file = JSON.stringify(encryptedFileObject)
      }
      
      let dstPath = storagePath
      if (options.path) {
        dstPath += `/${options.path}`
      }
      
      fs.writeFileSync(`${dstPath}/${filename}`, file)
    },
    /** 
     * copy data into a file on local
     * @param storagePath     file path to be read
     * @param options.destPath  local path to be downloaded/saved
     * @param options.isEncrypted   whether to encrypt a file or not
     * @param options.decryptionInfo.privateKey the worker private key
     * @param options.decryptionInfo.reEncryptionKey the key is re-encryption key that is generated by data owner and decrypted by the worker selector.
     */
    download: async (srcPath, options) => {
      let data = fs.readFileSync(`${storagePath}/${srcPath}`)
      const destPath = options.destPath

      if (options.isEncrypted) {
        const encryptedFileObject = JSON.parse(data)
        const { privateKey, reEncryptionKey } = options.decryptionInfo

        const reEncryptedSecretKey = await encryptionManager.encrypter.reEncryptSecretKey(encryptedFileObject.encryptedSecretKey, reEncryptionKey)

        const decryptedSecretKey = await encryptionManager.decrypter.decryptSecretKey(privateKey, reEncryptedSecretKey)

        data = encryptionManager.decrypter.decrypt(encryptedFileObject, decryptedSecretKey)
      }

      fs.writeFileSync(`${destPath}`, data)
    }
  };
}